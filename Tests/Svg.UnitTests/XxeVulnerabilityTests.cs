using System;
using System.IO;
using System.Reflection;
using System.Text;
using NUnit.Framework;

namespace Svg.UnitTests
{
    [TestFixture]
    public class XxeVulnerabilityTests
    {
        [TestCase(ExternalType.None)]
        [TestCase(ExternalType.Local)]
        [TestCase(ExternalType.Remote)]
        [TestCase(ExternalType.Local | ExternalType.Remote)]
        public void XxeResolveExternalResources(ExternalType resolveExternalXmlEntites)
        {
            SvgDocument.ResolveExternalXmlEntites = resolveExternalXmlEntites;

            var secretFilePath = MakeSecretFilePath();

            try
            {
                MakeSecretFile(secretFilePath);

                var maliciousSvg = MakeMaliciousSvg(secretFilePath, SvgTextId);
                var maliciousSvgDocument = MakeMaliciousSvgDocument(maliciousSvg);

                var svgTextElement = maliciousSvgDocument?.GetElementById(SvgTextId);
                var svgTextElementContent = svgTextElement?.Content;
                
                var expectedValue = 
                    resolveExternalXmlEntites.HasFlag(ExternalType.Local)
                        ? Secret
                        : null;

                Assert.That(svgTextElementContent, Is.EqualTo(expectedValue));
            }
            finally
            {
                DeleteSecretFile(secretFilePath);
            }
        }
        
        [TestCase(ExternalType.None, "__pull_request-873-01", "__pull_request-873-01-ExternalReferencesDisabled")]
        [TestCase(ExternalType.Remote, "__pull_request-873-01", "__pull_request-873-01-ExternalReferencesDisabled")]
        [TestCase(ExternalType.Local, "__pull_request-873-01", "__pull_request-873-01-ExternalReferencesEnabled")]
        [TestCase(ExternalType.Local | ExternalType.Remote, "__pull_request-873-01", "__pull_request-873-01-ExternalReferencesEnabled")]
        public void XxeResolveExternalImage(ExternalType resolveExternalImages, string svgName, string pngName)
        {
            SvgDocument.ResolveExternalImages = resolveExternalImages;

            var svgPath = Path.Combine(ImageTestDataSource.SuiteTestsFolder, "W3CTestSuite", "svg", svgName + ".svg");
            var pngPath = Path.Combine(ImageTestDataSource.SuiteTestsFolder, "W3CTestSuite", "png", pngName + ".png");

            ImageComparisonTest.CompareSvgImageWithReferenceImpl(svgName, svgPath, pngPath, false);
        }
        
        
        [TestCase(ExternalType.None, "__pull_request-873-02", "__pull_request-873-02-ExternalReferencesDisabled")]
        [TestCase(ExternalType.Remote, "__pull_request-873-02", "__pull_request-873-02-ExternalReferencesDisabled")]
        [TestCase(ExternalType.Local, "__pull_request-873-02", "__pull_request-873-02-ExternalReferencesEnabled")]
        [TestCase(ExternalType.Local | ExternalType.Remote, "__pull_request-873-02", "__pull_request-873-02-ExternalReferencesEnabled")]
        public void XxeResolveExternalElement(ExternalType resolveExternalElements, string svgName, string pngName)
        {
            SvgDocument.ResolveExternalElements = resolveExternalElements;

            var svgPath = Path.Combine(ImageTestDataSource.SuiteTestsFolder, "W3CTestSuite", "svg", svgName + ".svg");
            var pngPath = Path.Combine(ImageTestDataSource.SuiteTestsFolder, "W3CTestSuite", "png", pngName + ".png");

            ImageComparisonTest.CompareSvgImageWithReferenceImpl(svgName, svgPath, pngPath, false);
        }

        private static void MakeSecretFile(string secretFilePath)
        {
            File.AppendAllText(secretFilePath, Secret);
        }

        private static void DeleteSecretFile(string secretFilePath)
        {
            File.Delete(secretFilePath);
        }

        private static string MakeSecretFilePath()
        {
            var secretFilePath = $"{Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)}\\secret.txt";
            return secretFilePath;
        }

        private static SvgDocument MakeMaliciousSvgDocument(string maliciousSvg)
        {
            SvgDocument svgDocument;
            using (var stream = GenerateStreamFromString(maliciousSvg))
            {
                svgDocument = SvgDocument.Open<SvgDocument>(stream);
            }

            return svgDocument;
        }

        /// <summary>
        /// This SVG will read the secrets from the 'secret file' on the host.
        /// </summary>
        private static string MakeMaliciousSvg(string secretFilePath, string svgTextId)
        {
            var secretFileUri = new Uri(secretFilePath);
            
            var sb = new StringBuilder();
            sb.AppendLine(@"<?xml version=""1.0"" encoding=""utf-8""?>");
            sb.AppendLine(@"<!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.1//EN"" ""http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"" [");
            sb.AppendLine($@"    <!ENTITY xxe SYSTEM ""{secretFileUri}"">");
            sb.AppendLine(@"]>");
            sb.AppendLine(@"<svg width=""128px"" height=""128px"" xmlns=""http://www.w3.org/2000/svg"" version=""1.1"">");
            sb.AppendLine($@"  <text id=""{svgTextId}"" font-size=""16"" x=""0"" y=""16"">&xxe;</text>");
            sb.AppendLine(@"</svg>");

            var maliciousSvg = sb.ToString();
            return maliciousSvg;
        }

        private static Stream GenerateStreamFromString(string s)
        {
            var stream = new MemoryStream();
            var writer = new StreamWriter(stream);
            writer.Write(s);
            writer.Flush();
            stream.Position = 0;
            return stream;
        }

        private const string SvgTextId = "secretText";
        private const string Secret = "This is a secret!";
    }
}
