using System;
using System.IO;
using System.Text;
using NUnit.Framework;

namespace Svg.UnitTests
{
    [TestFixture]
    public class XxeVulnerabilityTests
    {
        private const string LocalUriString0 = "file:///a.txt";
        private const string LocalUriString1 = "a.txt";
        private const string RemoteUriString0 = "https://github.com/svg-net/SVG";
        private const string RemoteUriString1 = "https://github.com/svg-net/SVG/raw/master/Tests/W3CTestSuite/images/20x20.png";

        [TestCase(ExternalType.None, LocalUriString0, false)]
        [TestCase(ExternalType.None, LocalUriString1, false)]
        [TestCase(ExternalType.None, RemoteUriString0, false)]
        [TestCase(ExternalType.None, RemoteUriString1, false)]
        [TestCase(ExternalType.Local, LocalUriString0, true)]
        [TestCase(ExternalType.Local, LocalUriString1, false)]
        [TestCase(ExternalType.Local, RemoteUriString0, false)]
        [TestCase(ExternalType.Local, RemoteUriString1, false)]
        [TestCase(ExternalType.Remote, LocalUriString0, false)]
        [TestCase(ExternalType.Remote, LocalUriString1, false)]
        [TestCase(ExternalType.Remote, RemoteUriString0, true)]
        [TestCase(ExternalType.Remote, RemoteUriString1, true)]
        [TestCase(ExternalType.Local | ExternalType.Remote, LocalUriString0, true)]
        [TestCase(ExternalType.Local | ExternalType.Remote, LocalUriString1, false)]
        [TestCase(ExternalType.Local | ExternalType.Remote, RemoteUriString0, true)]
        [TestCase(ExternalType.Local | ExternalType.Remote, RemoteUriString1, true)]
        public void TextExternalType(ExternalType externalType, string uriString, bool expected)
        {
            Assert.That(externalType.AllowsResolving(new Uri(uriString, UriKind.RelativeOrAbsolute)), Is.EqualTo(expected));
        }

        [TestCase(ExternalType.None, null)]
        [TestCase(ExternalType.Local, Secret)]
        [TestCase(ExternalType.Remote, null)]
        [TestCase(ExternalType.Local | ExternalType.Remote, Secret)]
        public void TestResolveExternalXmlEntites(ExternalType externalType, string expected)
        {
            SvgDocument.ResolveExternalXmlEntites = externalType;

            Assert.That(new SvgDtdResolver().ResolveExternalXmlEntities, Is.EqualTo(externalType));

            var secretFilePath = MakeSecretFilePath();

            try
            {
                MakeSecretFile(secretFilePath);

                var maliciousSvg = MakeMaliciousSvg(secretFilePath, SvgTextId);
                var maliciousSvgDocument = MakeMaliciousSvgDocument(maliciousSvg);

                var svgTextElement = maliciousSvgDocument?.GetElementById(SvgTextId);
                var svgTextElementContent = svgTextElement?.Content;

                Assert.That(svgTextElementContent, Is.EqualTo(expected));
            }
            finally
            {
                DeleteSecretFile(secretFilePath);
            }

        }

        [TestCase(ExternalType.None, true)]
        [TestCase(ExternalType.Local, false)]
        [TestCase(ExternalType.Remote, true)]
        [TestCase(ExternalType.Local | ExternalType.Remote, false)]
        public void TestResolveExternalImages(ExternalType externalType, bool isNull)
        {
            SvgDocument.ResolveExternalImages = externalType;

            Assert.That(new SvgImage().ResolveExternalImages, Is.EqualTo(externalType));

            const string imageId = "ImageId";

            var sb = new StringBuilder();
            sb.Append(@"<?xml version=""1.0"" encoding=""utf-8""?>");
            sb.Append(@"<svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" height=""20"" width=""20"">");
            sb.Append($@"  <image id=""{imageId}"" height=""20"" width=""20"" xlink:href=""./W3CTestSuite/images/20x20.png"" />");
            sb.Append(@"</svg>");
            var svg = sb.ToString();

            var svgDoc = MakeMaliciousSvgDocument(svg);
            svgDoc.BaseUri = new Uri(Path.Combine(TestsRootPath, "dummy.svg"));

            var svgImage = svgDoc.GetElementById<SvgImage>(imageId);
            var image = svgImage.GetImage();

            if (isNull)
                Assert.That(image, Is.Null);
            else
                Assert.That(image, Is.Not.Null);
        }

        [TestCase(ExternalType.None, true)]
        [TestCase(ExternalType.Local, false)]
        [TestCase(ExternalType.Remote, true)]
        [TestCase(ExternalType.Local | ExternalType.Remote, false)]
        public void TestResolveExternalElements(ExternalType externalType, bool isEmpty)
        {
            SvgDocument.ResolveExternalElements = externalType;

            Assert.That(new SvgElementIdManager(null).ResolveExternalElements, Is.EqualTo(externalType));

            var svgFilePath = Path.Combine(TestContext.CurrentContext.TestDirectory, "a.svg");

            try
            {
                const string textId = "textId";

                var sb = new StringBuilder();
                sb.Append(@"<?xml version=""1.0"" encoding=""utf-8""?>");
                sb.Append(@"<svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" height=""25"" width=""65"">");
                sb.Append(@"  <defs>");
                sb.Append(@"    <text id=""ReferencedText"">Referenced</text>");
                sb.Append(@"  </defs>");
                sb.Append($@"  <text x=""0"" y=""10""><tref id=""{textId}"" xlink:href=""./{Path.GetFileName(svgFilePath)}#ReferencedText"" /></text>");
                sb.Append(@"</svg>");
                var svg = sb.ToString();

                File.AppendAllText(svgFilePath, svg);

                var svgDoc = SvgDocument.Open(svgFilePath);

                var svgTextRef = svgDoc.GetElementById<SvgTextRef>(textId);
                var contentNodes = svgTextRef.GetContentNodes();

                if (isEmpty)
                    Assert.That(contentNodes, Is.Empty);
                else
                    Assert.That(contentNodes, Is.Not.Empty);
            }
            finally
            {
                File.Delete(svgFilePath);
            }
        }

        private static void MakeSecretFile(string secretFilePath)
        {
            File.AppendAllText(secretFilePath, Secret);
        }

        private static void DeleteSecretFile(string secretFilePath)
        {
            File.Delete(secretFilePath);
        }

        private static string MakeSecretFilePath()
        {
            return Path.Combine(TestContext.CurrentContext.TestDirectory, "secret.txt");
        }

        private static SvgDocument MakeMaliciousSvgDocument(string maliciousSvg)
        {
            SvgDocument svgDocument;
            using (var stream = GenerateStreamFromString(maliciousSvg))
            {
                svgDocument = SvgDocument.Open<SvgDocument>(stream);
            }

            return svgDocument;
        }

        /// <summary>
        /// This SVG will read the secrets from the 'secret file' on the host.
        /// </summary>
        private static string MakeMaliciousSvg(string secretFilePath, string svgTextId)
        {
            var secretFileUri = new Uri(secretFilePath);
            
            var sb = new StringBuilder();
            sb.AppendLine(@"<?xml version=""1.0"" encoding=""utf-8""?>");
            sb.AppendLine(@"<!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.1//EN"" ""http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"" [");
            sb.AppendLine($@"    <!ENTITY xxe SYSTEM ""{secretFileUri}"">");
            sb.AppendLine(@"]>");
            sb.AppendLine(@"<svg width=""128px"" height=""128px"" xmlns=""http://www.w3.org/2000/svg"" version=""1.1"">");
            sb.AppendLine($@"  <text id=""{svgTextId}"" font-size=""16"" x=""0"" y=""16"">&xxe;</text>");
            sb.AppendLine(@"</svg>");

            var maliciousSvg = sb.ToString();
            return maliciousSvg;
        }

        private static Stream GenerateStreamFromString(string s)
        {
            var stream = new MemoryStream();
            var writer = new StreamWriter(stream);
            writer.Write(s);
            writer.Flush();
            stream.Position = 0;
            return stream;
        }

        private const string SvgTextId = "secretText";
        private const string Secret = "This is a secret!";

        private static string _testsRootPath;

        private static string TestsRootPath
        {
            get
            {
                if (!string.IsNullOrEmpty(_testsRootPath))
                    return _testsRootPath;

                var path = TestContext.CurrentContext.TestDirectory;
                while (!Path.GetFileName(path).Equals("Tests"))
                    path = Path.GetDirectoryName(path);

                _testsRootPath = path;
                return _testsRootPath;
            }
        }
    }
}
